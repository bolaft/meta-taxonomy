%FORWARD_LOOKING

# forward looking functions

assert
S.provides(p)
!A.believes(p)
S.wants(A.believes(p))
p.isPropositional
p.isInformation

reassert
S.provides(p)
p.isPropositional
p.isInformation
p.inHistory

other statement
S.provides(p)
p.isPropositional
p.isInformation

info-request
S.wants(p)

action-directive
S.wants(A.performs(a))

open-option
S.options(A.performs(a))

offer
S.commits(S.performs(a))
!S.conditions(A.wants(S.performs(a)))

commit
S.commits(S.performs(a))
S.conditions(A.wants(S.performs(a)))

conventional opening closing
S.wants(d) || S.wants(!d)

explicit-performative
S.performs(p)

exclamation
S.performs(p)
p.isExclamation

%BACKWARD_LOOKING

# backward looking functions

accept
A.provides(p)
S.provides(p)
p.isPositive
!p.isPartial

accept-part
A.provides(p)
S.provides(p)
p.isPositive
p.isPartial

maybe
A.provides(p)
S.provides(p)
p.isIndecisive

reject-part
S.provides(p)
!p.isPositive
p.isPartial

reject
A.provides(p)
S.provides(p)
!p.isPositive
!p.isPartial

hold
A.wants(p)
S.holds(p)

signal-non-understanding

S.provides(f)
!f.isPositive

acknowledge
S.provides(f)
f.isPositive
!f.isEcho

repeat-rephrase
S.provides(f)
f.isPositive
f.isEcho

completion
S.complete(A)
S.provides(f)
f.isPositive

correct-misspeaking
S.corrects(A)
S.provides(f)
f.isPositive

answer
A.wants(p)
S.provides(p)
p.isInformation