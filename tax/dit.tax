%Ta

# information seeking functions

question
S.wants(p)
A.knows(p)
p.isInformation

propositionalQuestion
S.wants(p)
A.knows(p)
p.isPropositional
p.isInformation

checkQuestion
S.wants(p)
A.knows(p)
S.weaklyBelieves(p)
p.isInformation

posiCheck
S.wants(p)
A.knows(p)
S.weaklyBelieves(p)
S.weaklyBelieves(A.believes(p))
p.isInformation
p.isPositive

negaCheck
S.wants(p)
A.knows(p)
S.weaklyBelieves(p)
S.weaklyBelieves(A.believes(p))
p.isInformation
!p.isPositive

setQuestion
S.wants(p)
A.knows(p)
p.inSet
p.isInformation

choiceQuestion
S.wants(p)
A.knows(p)
p.inXORSet
p.isInformation

# information providing functions

inform
S.provides(p)
S.believes(p)
S.believes(!A.knows(p))
p.isInformation

agreement
S.provides(p)
S.believes(p)
A.weaklyBelieves(p)
p.isInformation

disagreement
S.provides(p)
S.believes(p)
A.weaklyBelieves(!p)
p.isInformation

correct
S.provides(p)
S.believes(p)
S.wants(A.believes(p))
A.believes(!p)
p.isInformation

answer
S.provides(p)
S.believes(p)
A.wants(p)
p.isInformation

confirm
S.provides(p)
S.believes(p)
A.wants(p)
A.weaklyBelieves(p)
p.isInformation

disconfirm
S.provides(p)
S.believes(p)
A.wants(p)
A.weaklyBelieves(!p)
p.isInformation

# commissive functions

offer
S.commits(S.performs(a))
S.conditions(A.wants(S.performs(a)))

promise
S.commits(S.performs(a))
a.isBeneficial

threat
S.commits(S.performs(a))
a.isHarmful

addressRequest
S.commits(S.performs(a))
A.wants(S.performs(a))
S.conditions(p)

acceptRequest
S.commits(S.performs(a))
A.wants(S.performs(a))

refuseRequest
!S.commits(S.performs(a))
A.wants(S.performs(a))

addressSuggestion
S.commits(S.performs(a))
A.options(S.performs(a))
S.conditions(p)
A.believes(S.able(a))
A.believes(a.isBeneficial)

acceptSuggestion
S.commits(S.performs(a))
A.options(S.performs(a))
A.believes(S.able(a))
A.believes(a.isBeneficial)

refuseSuggestion
!S.commits(S.performs(a))
A.options(S.performs(a))
A.believes(S.able(a))
A.believes(a.isBeneficial)

# directive functions

instruct
S.wants(A.performs(a))
A.able(a)

addressOffer
A.commits(A.performs(a))
A.conditions(S.wants(A.performs(a)))

acceptOffer
A.commits(A.performs(a))
A.conditions(S.wants(A.performs(a)))
S.wants(A.performs(a))

declineOffer
A.commits(A.performs(a))
A.conditions(S.wants(A.performs(a)))
S.wants(!A.performs(a))

indirectRequest
S.wants(A.performs(a))
S.conditions(A.wants(A.performs(a)))

request
S.wants(A.performs(a))
S.conditions(A.wants(A.performs(a)))
A.able(a)

suggest
S.options(A.performs(a))
a.isBeneficial
A.able(a)

%AutoF

# auto feedback functions

autoPositive
S.provides(f)
!f.isAllo
f.isPositive

autoNegative
S.provides(f)
!f.isAllo
!f.isPositive

execPositiveAutoFeedback
S.provides(f)
!f.isAllo
f.isPositive
f.isExecution

evalPositiveAutoFeedback
S.provides(f)
!f.isAllo
f.isPositive
f.isEvaluation

interpretationPositiveAutoFeedback
S.provides(f)
!f.isAllo
f.isPositive
f.isInterpretation

perceptionPositiveAutoFeedback
S.provides(f)
!f.isAllo
f.isPositive
f.isPerception

attententionPositiveAutoFeedback
S.provides(f)
!f.isAllo
f.isPositive
f.isAttention

executionNegativeAutoFeedback
S.provides(f)
!f.isAllo
!f.isPositive
f.isExecution

evaluationNegativeAutofeedback
S.provides(f)
!f.isAllo
!f.isPositive
f.isEvaluation

perceptionNegativeAutoFeedback
S.provides(f)
!f.isAllo
!f.isPositive
f.isPerception

attentionNegativeAutoFeedback
S.provides(f)
!f.isAllo
!f.isPositive
f.isAttention

%AlloF

# allo feedback functions

alloPositive
S.provides(f)
f.isAllo
f.isPositive

negative
S.provides(f)
f.isAllo
!f.isPositive

overallPositiveAlloFeedback
S.provides(f)
f.isAllo
f.isPositive
f.isExecution

executionNegativeAlloFeedback
S.provides(f)
f.isAllo
!f.isPositive
f.isExecution

evaluationPositiveAlloFeedback
S.provides(f)
f.isAllo
f.isPositive
f.isEvaluation

evaluationNegativeAlloFeedback
S.provides(f)
f.isAllo
!f.isPositive
f.isEvaluation

interpretationPositiveAlloFeedback
S.provides(f)
f.isAllo
f.isPositive
f.isInterpretation

interpretationNegativeAlloFeedback
S.provides(f)
f.isAllo
!f.isPositive
f.isInterpretation

perceptionPositiveAlloFeedback
S.provides(f)
f.isAllo
f.isPositive
f.isPerception

perceptionNegativeAlloFeedback
S.provides(f)
f.isAllo
!f.isPositive
f.isPerception

attentionPositiveAlloFeedback
S.provides(f)
f.isAllo
f.isPositive
f.isPerception

attentionNegativeAlloFeedback
S.provides(f)
f.isAllo
!f.isPositive
f.isPerception

attentionFeedbackElicitation
S.wants(f)
f.isAllo
f.isAttention

perceptionFeedbackElicitation
S.wants(f)
f.isAllo
f.isPerception

interpretationFeedbackElicitation
S.wants(f)
f.isAllo
f.isInterpretation

evaluationFeedbackElicitation
S.wants(f)
f.isAllo
f.isEvaluation

executionFeedbackElicitation
S.wants(f)
f.isAllo
f.isExecution

%TuM

# turn management functions:

turnTake
S.wants(S.has(tu))
!A.has(tu)

turnAccept
S.wants(S.has(tu))
!A.has(tu)
A.wants(S.has(tu))

turnGrab
S.wants(S.has(tu))
A.has(tu)
!A.wants(S.has(tu))

turnKeep
S.wants(S.has(tu))
S.has(tu)

turnAssign
S.wants(A.has(tu))

turnRelease
S.wants(!S.has(tu))

%TiM

# time management functions

stalling
S.stall()
pausing
S.pause()

%CONTACT_MANAGEMENT

# contact management

contactCheck
S.wants(A.provides(A.isInDialogue(d))
contact indication
S.provides(S.isInDialogue(d))

%OCM

# own communication management functions

selfErrorSignal
S.signalsError(S)

retraction
S.retracts(S)

selfCorrection
S.corrects(S)

%PCM

# partner communcation management functions

completion
S.complete(A)

correctMisspeaking
S.corrects(A)

%DIALOG_STRUCTURE_MANAGEMENT

# dialogue structure management functions

opening
S.wants(d)

preclosing
S.wants(!d)

topicIntroduction
S.wants(to)

topicShiftAnnouncement
S.wants(!to)

topic shift
S.wants(!to)
S.wants(to)

%SOCIAL_OBLIGATIONS_MANAGEMENT

# social obligations management

initialGreeting
S.isInDialogue(d)
A.isInDialogue(d)
S.wants(f)

returnGreeting
S.isInDialogue(d)
A.isInDialogue(d)
A.wants(f)
S.provides(f)

initialSelfIntroduction
S.introduces(S)
S.wants(f)

returnSelfIntroduction
S.introduces(S)
A.wants(f)

apology
A.provides(f)
!f.isPositive
S.performs(p)
p.isRegret
S.wants(f)

apologyDownplay
A.performs(p)
p.isRegret
A.wants(f)
S.provides(f)

thanking
S.performs(p)
p.isThanks
S.wants(f)

thankingDownplay
A.performs(p)
p.isThanks
A.wants(f)
S.provides(f)

initialGoodbye
S.wants(!S.isInDialogue(d))
S.wants(f)

returnGoodbye
S.wants(!S.isInDialogue(d))
A.wants(!S.isInDialogue(d))
A.wants(f)
S.provides(f)